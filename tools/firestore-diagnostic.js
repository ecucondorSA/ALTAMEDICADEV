#!/usr/bin/env node
// üîç FIRESTORE DIAGNOSTIC TOOL - VERSI√ìN AVANZADA
// Herramienta de diagn√≥stico espec√≠fica para Firestore con el proyecto correcto

import admin from 'firebase-admin';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Cargar variables de entorno
dotenv.config({ path: path.join(__dirname, '..', 'apps', 'api-server', '.env.local') });

console.log('üîç DIAGN√ìSTICO COMPLETO DE FIRESTORE - ALTAMEDIC');
console.log('===============================================');

// 1. Verificar variables de entorno
console.log('\nüìã 1. VERIFICACI√ìN DE VARIABLES DE ENTORNO');
const requiredVars = [
  'FIREBASE_PROJECT_ID',
  'FIREBASE_CLIENT_EMAIL', 
  'FIREBASE_PRIVATE_KEY'
];

let envValid = true;
for (const varName of requiredVars) {
  const value = process.env[varName];
  if (!value) {
    console.log(`‚ùå ${varName}: FALTANTE`);
    envValid = false;
  } else {
    if (varName === 'FIREBASE_PRIVATE_KEY') {
      console.log(`‚úÖ ${varName}: [PRIVATE KEY PRESENTE - ${value.length} caracteres]`);
    } else {
      console.log(`‚úÖ ${varName}: ${value}`);
    }
  }
}

// Verificar que sea el proyecto correcto
if (process.env.FIREBASE_PROJECT_ID !== 'altamedic-20f69') {
  console.log(`‚ö†Ô∏è ADVERTENCIA: Project ID deber√≠a ser 'altamedic-20f69' pero es '${process.env.FIREBASE_PROJECT_ID}'`);
}

if (!envValid) {
  console.log('\n‚ùå FALTAN VARIABLES DE ENTORNO CR√çTICAS');
  process.exit(1);
}

// 2. Inicializar Firebase Admin
console.log('\nüîß 2. INICIALIZANDO FIREBASE ADMIN');
try {
  // Verificar si ya est√° inicializado
  if (admin.apps.length === 0) {
    admin.initializeApp({
      credential: admin.credential.cert({
        projectId: process.env.FIREBASE_PROJECT_ID,
        clientEmail: process.env.FIREBASE_CLIENT_EMAIL,
        privateKey: process.env.FIREBASE_PRIVATE_KEY.replace(/\\n/g, '\n'),
      }),
      projectId: process.env.FIREBASE_PROJECT_ID,
    });
    console.log('‚úÖ Firebase Admin inicializado correctamente');
  } else {
    console.log('‚úÖ Firebase Admin ya estaba inicializado');
  }
} catch (error) {
  console.log('‚ùå Error inicializando Firebase Admin:', error.message);
  console.log('üîç Detalles:', error.code);
  process.exit(1);
}

// 3. Probar conectividad a Firestore
console.log('\nüåê 3. PROBANDO CONECTIVIDAD A FIRESTORE');
try {
  const db = admin.firestore();
  console.log('‚úÖ Instancia de Firestore obtenida');
  
  // Probar operaci√≥n b√°sica de lectura
  console.log('\nüìñ 4. PROBANDO OPERACI√ìN DE LECTURA');
  const startTime = Date.now();
  const testDoc = await db.collection('_health_check').doc('test').get();
  const readTime = Date.now() - startTime;
  console.log(`‚úÖ Operaci√≥n de lectura exitosa (${readTime}ms)`);
  console.log(`üìä Documento existe: ${testDoc.exists}`);
  
  // Probar operaci√≥n b√°sica de escritura
  console.log('\n‚úçÔ∏è 5. PROBANDO OPERACI√ìN DE ESCRITURA');
  const writeStart = Date.now();
  await db.collection('_health_check').doc('test').set({
    timestamp: admin.firestore.FieldValue.serverTimestamp(),
    status: 'diagnostic_test',
    success: true,
    projectId: process.env.FIREBASE_PROJECT_ID
  });
  const writeTime = Date.now() - writeStart;
  console.log(`‚úÖ Operaci√≥n de escritura exitosa (${writeTime}ms)`);
  
  // Probar query con filtros (lo que estaba fallando)
  console.log('\nüîç 6. PROBANDO QUERY CON FILTROS (PACIENTES)');
  try {
    const patientsRef = db.collection('patients');
    const query = patientsRef
      .where('isActive', '==', true)
      .orderBy('createdAt', 'desc')
      .limit(1);
    
    const queryStart = Date.now();
    const snapshot = await query.get();
    const queryTime = Date.now() - queryStart;
    console.log(`‚úÖ Query con filtros exitosa (${queryTime}ms)`);
    console.log(`üìä Documentos encontrados: ${snapshot.size}`);
  } catch (queryError) {
    if (queryError.code === 9) {
      console.log('‚ö†Ô∏è Query requiere √≠ndice compuesto - ESTO ES NORMAL');
      console.log('üîó Crear √≠ndice en: https://console.firebase.google.com/u/0/project/altamedic-20f69/firestore/indexes');
      console.log('üìã Campos requeridos: isActive (ASC) + createdAt (DESC)');
      console.log('üí° Esta es la causa del error original - necesita √≠ndices');
    } else {
      console.log('‚ùå Error en query:', queryError.message);
      console.log('üîç C√≥digo:', queryError.code);
    }
  }
  
  // Probar queries simples (sin √≠ndices)
  console.log('\nüìã 7. PROBANDO QUERIES SIMPLES');
  try {
    const simpleQuery = await db.collection('patients').limit(5).get();
    console.log(`‚úÖ Query simple exitosa: ${simpleQuery.size} documentos`);
    
    if (simpleQuery.size === 0) {
      console.log('‚ÑπÔ∏è No hay documentos en la colecci√≥n patients');
      console.log('üí° Esto es normal si es un proyecto nuevo');
    }
  } catch (simpleError) {
    console.log('‚ùå Error en query simple:', simpleError.message);
  }
  
  console.log('\nüéâ DIAGN√ìSTICO COMPLETADO EXITOSAMENTE');
  console.log('=====================================');
  console.log('‚úÖ Firestore est√° funcionando correctamente');
  console.log('üìã RESUMEN:');
  console.log('   - Proyecto: altamedic-20f69');
  console.log('   - Conectividad: ‚úÖ OK');
  console.log('   - Lectura: ‚úÖ OK');
  console.log('   - Escritura: ‚úÖ OK');
  console.log('   - Queries simples: ‚úÖ OK');
  console.log('   - Queries con √≠ndices: ‚ö†Ô∏è Requiere configuraci√≥n');
  
  console.log('\nüîó PR√ìXIMOS PASOS:');
  console.log('1. Crear √≠ndices en: https://console.firebase.google.com/u/0/project/altamedic-20f69/firestore/indexes');
  console.log('2. Habilitar reglas de Firestore para producci√≥n');
  console.log('3. Configurar colecciones iniciales si es necesario');
  
} catch (error) {
  console.log('‚ùå Error de conectividad:', error.message);
  console.log('üîç C√≥digo de error:', error.code);
  console.log('üìã Detalles completos:', error);
  
  if (error.code === 7) {
    console.log('\nüí° SOLUCI√ìN: Habilitar Cloud Firestore API en Google Cloud Console');
    console.log('üîó Link: https://console.cloud.google.com/apis/library/firestore.googleapis.com?project=altamedic-20f69');
  }
  
  if (error.code === 3) {
    console.log('\nüí° SOLUCI√ìN: Verificar argumentos de inicializaci√≥n');
    console.log('   - Verificar que el proyecto existe');
    console.log('   - Verificar permisos de la service account');
  }
  
  process.exit(1);
}

process.exit(0);